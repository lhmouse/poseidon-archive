/* This is a sample config file for Poseidon. No rights reserved.
 *
 * The syntax is similar to JSON5, with a few differences:
 * 1. Equals signs may be used in place of colons.
 * 2. Commas shall not be used as element delimiters.
 * 3. Genuine signed 64-bit integers are supported.
 * 4. Strings cannot straddle multiple lines.
 * 5. Single-quoted strings do not support escapes, like in Perl or Shell.
 *
 * You may copy it to `main.conf` and make modifications at your disposal.
**/

general: {
  // permit_root_startup:
  //   true           = the program may start as root (DISCOURAGED)
  //   null or false  = the program cannot start as root
  permit_root_startup: false

  // pid_file_path:
  //   [path]      = write PID to this file after startup
  //   null        = don't write PID anywhere
  pid_file_path: "../../var/poseidon/poseidon.pid"

  // default_compression_level:
  //   0        = disable compression
  //   1-9      = specify level of compression
  //   null     = use zlib default value
  default_compression_level: 8

  // addons:
  //   This is the list of addons (shared libraries) to load. Addons are
  //   loaded in this precise order. If a string is not a path but a name,
  //   conventional library search rules apply. Addons cannot be unloaded.
  addons: [
    //"libposeidon_example_fiber.so"
    //"libposeidon_example_timer.so"
    //"libposeidon_example_tcp_echo.so"
    "libposeidon_example_tls_echo.so"
    //"libposeidon_example_udp_echo.so"
  ]
}

logger: {
  // levels:
  //   Six levels are defined here, each of which is assigned a hard-coded
  //   name. They correspond to `POSEIDON_LOG_*` macros.
  levels: {
    fatal: {
      color: "35;1"  // bright magenta
      stream: "stderr"
    }

    error: {
      color: "31;1"  // bright red
      stream: "stderr"
    }

    warn: {
      color: "33"  // yellow
      stream: "stdout"
    }

    info: {
      color: "32"  // green
      stream: "stdout"
    }

    debug: {
      color: "36"  // cyan
      stream: "stdout"
      trivial: true  // expendable in case of congestion
    }

    trace: {
      color: "34;1"  // bright blue
      stream: null  // no output
      trivial: true
    }
  }

  // streams:
  //   These are valid values for `stream` of each individual level above.
  //   The streams "stderr" and "stdout" are special: In addition to the
  //   common options, their outputs are also copied to standard error and
  //   standard output, respectively.
  streams: {
    stderr: {
      color: true  // use color (master switch)
      file: "../../var/poseidon/server.err"  // write to this file
    }

    stdout: {
      color: true
      file: "../../var/poseidon/server.log"
    }
  }
}

network: {
  poll: {
    // event_buffer_size:
    //   [count]  = number of I/O events for each single poll
    //   null     = default value: 1,024
    event_buffer_size: 1`024

    // io_buffer_size:
    //   [bytes]  = size of temporary buffer for each single operation
    //   null     = default value: 65,536
    io_buffer_size: 10

    // throttle_size:
    //   [bytes]  = suspend reading if write queue exceeds this size
    //   null     = default value: 1,048,576
    throttle_size: 1`048`576
  }

  tls: {
    // default_certificate:
    //   [path]  = default certificate file for servers
    //   null    = no default certificate
    default_certificate: "tls/test.crt"

    // default_private_key:
    //   [path]  = default private key file for servers
    //   null    = no default private key
    default_private_key: "tls/test.key"

    // trusted_ca_path:
    //   [path]  = directory of trusted CA certificates for clients
    //   null    = no validation (DANGEROUS for production use)
    trusted_ca_path: "/etc/ssl/certs"
  }

  http: {
    // max_header_length:
    //   [bytes]  = maximum number of bytes of headers of a request
    //   null     = default value: 16,384
    max_header_length: 16`384

    // max_content_length:
    //   [bytes]  = maximum length of bytes of payload of a request
    //   null     = default value: 2,097,152
    max_content_length: 2`097`152

    // keep_alive_timeout:
    //   [secs]   = shut persistent connections down after this timeout
    //   null     = default value: 30
    keep_alive_timeout: 30

    // max_websocket_frame_length:
    //   [bytes]  = maximum number of bytes of payload of a data frame
    //              (control frames cannot be larger than 127 bytes)
    //   null     = default value: 65,536
    max_websocket_frame_length: 65`536
  }
}

worker: {
  // thread_count:
  //   [count]  = maximum number of worker threads
  //   null     = default value: 1
  thread_count: 6
}

fiber: {
  // stack_vm_size:
  //   [bytes]  = stack size for each fiber, including 2 guard pages
  //              (this must be a multiple of 65536)
  //   null     = use system thread stack size
  stack_vm_size: null

  // warn_timeout:
  //   [secs]   = print a warning if suspension exceeds this duration
  //   null     = default value: 15 seconds
  warn_timeout: 15

  // fail_timeout
  //   [secs]   = resume execution if suspension exceeds this duration
  //   null     = default value: 300 seconds
  fail_timeout: 300
}
